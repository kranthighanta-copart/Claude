name: Claude Code Review
on:
  workflow_call:
    inputs:
      pr-number:
        required: true
        type: number
        description: "Pull request number"
      head-sha:
        required: true
        type: string
        description: "Head commit SHA of the PR"
      base-branch:
        required: true
        type: string
        description: "Base branch of the PR (typically main or master)"
      repository:
        required: true
        type: string
        description: "Repository name in owner/repo format"
      trigger-phrase:
        required: false
        type: string
        default: '@milcheck'
        description: "Trigger phrase for comment-based reviews"
      max-files:
        required: false
        type: number
        default: 50
        description: "Maximum number of files to review"
      use-milchick-voice:
        required: false
        type: boolean
        default: false
        description: "If true, instructs the reviewer to use the voice of Seth Milchick from Severance."
    secrets:
      github-token:
        required: true
        description: "GitHub token with repo access"
      jira-token:
        required: true
        description: "Jira API token"
      anthropic-api-key:
        required: true
        description: "Anthropic API key"

permissions:
  issues: write
  pull-requests: write
  contents: read

jobs:
  claude-review:
    name: Claude Code Review
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.head-sha }}
          fetch-depth: 0
          token: ${{ secrets.github-token }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Create review directories
        shell: bash
        run: |
          mkdir -p .claude-review/pr-info

      - name: Extract PR information
        shell: bash
        run: |
          # Fetch PR details
          PR_INFO=$(curl -s -H "Authorization: token ${{ secrets.github-token }}" \
            "https://api.github.com/repos/${{ inputs.repository }}/pulls/${{ inputs.pr-number }}")
          
          if [ -z "$PR_INFO" ]; then
            echo "Error: Failed to fetch PR information. Check the repository and PR number."
            exit 1
          fi

          PR_TITLE=$(echo "$PR_INFO" | jq -r .title)
          PR_DESCRIPTION=$(echo "$PR_INFO" | jq -r .body)
          PR_AUTHOR=$(echo "$PR_INFO" | jq -r .user.login)
          TARGET_BRANCH="${{ inputs.base-branch }}"
          
          # Save PR info for Claude
          echo "$PR_INFO" > .claude-review/pr-info/pr-info.json
          
          # Set environment variables
          echo "PR_TITLE=$PR_TITLE" >> $GITHUB_ENV
          echo "PR_DESCRIPTION<<EOF" >> $GITHUB_ENV
          echo "$PR_DESCRIPTION" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "PR_AUTHOR=$PR_AUTHOR" >> $GITHUB_ENV
          echo "TARGET_BRANCH=$TARGET_BRANCH" >> $GITHUB_ENV

      - name: Generate diff and prepare for review
        shell: bash
        run: |
          # Generate the diff between the PR and target branch
          git fetch origin ${{ inputs.base-branch }}:${{ inputs.base-branch }}
          COMMIT_BASE=$(git merge-base origin/${{ inputs.base-branch }} HEAD)
          git diff $COMMIT_BASE..HEAD > .claude-review/pr-changes.diff
          
          # List changed files
          git diff --name-only $COMMIT_BASE..HEAD > .claude-review/changed-files.txt
          
          # Get the total number of changed files
          TOTAL_FILES=$(wc -l < .claude-review/changed-files.txt | tr -d ' ')
          
          # Limit to max files if needed
          if [ "$TOTAL_FILES" -gt "${{ inputs.max-files }}" ]; then
            head -n ${{ inputs.max-files }} .claude-review/changed-files.txt > .claude-review/files-to-review.txt
            echo "Reviewing first ${{ inputs.max-files }} files out of $TOTAL_FILES changed files"
          else
            cp .claude-review/changed-files.txt .claude-review/files-to-review.txt
            echo "Reviewing all $TOTAL_FILES changed files"
          fi
          
          # Get commit messages for Jira reference extraction
          git log $COMMIT_BASE..HEAD --pretty=format:"%s%n%b" > .claude-review/commit-messages.txt

      - name: Extract Jira ticket information
        shell: bash
        env:
          JIRA_TOKEN: ${{ secrets.jira-token }}
        run: |
          # Create script to extract Jira tickets
          cat > .claude-review/extract-jira.js << 'EOF'
          const fs = require('fs');
          const https = require('https');
          
          async function main() {
            // Read PR description and commit messages
            const prDescription = process.env.PR_DESCRIPTION || '';
            const commitMessages = fs.readFileSync('.claude-review/commit-messages.txt', 'utf8');
            const allText = prDescription + '\n' + commitMessages;
          
            // Extract Jira ticket IDs (both formats: YP-12345 and URLs)
            const jiraRegex = /(?:YP-\d+|https:\/\/jira\.copart\.com\/browse\/(YP-\d+))/g;
            const matches = allText.match(jiraRegex) || [];
            const ticketIds = [...new Set(matches.map(match => {
              if (match.startsWith('https://')) {
                return match.split('/').pop();
              }
              return match;
            }))];
          
            console.log(`Found Jira tickets: ${ticketIds.join(', ')}`);
          
            if (ticketIds.length === 0) {
              fs.writeFileSync('.claude-review/jira-tickets.json', JSON.stringify([]));
              console.log('No Jira tickets found');
              return;
            }
          
            // Fetch ticket details
            const jiraToken = process.env.JIRA_TOKEN;
            const tickets = [];
          
            function fetchTicket(ticketId) {
              return new Promise((resolve, reject) => {
                const options = {
                  hostname: 'jira.copart.com',
                  path: `/rest/api/2/issue/${ticketId}`,
                  method: 'GET',
                  headers: {
                    'Authorization': `Bearer ${jiraToken}`,
                    'Accept': 'application/json'
                  }
                };
          
                const req = https.request(options, (res) => {
                  let data = '';
                  res.on('data', chunk => data += chunk);
                  res.on('end', () => {
                    if (res.statusCode === 200) {
                      try {
                        const ticket = JSON.parse(data);
                        resolve({
                          id: ticketId,
                          summary: ticket.fields.summary,
                          description: ticket.fields.description,
                          status: ticket.fields.status.name,
                          assignee: ticket.fields.assignee ? ticket.fields.assignee.displayName : 'Unassigned'
                        });
                      } catch (e) {
                        reject(new Error(`Failed to parse response for ${ticketId}: ${e.message}`));
                      }
                    } else {
                      reject(new Error(`HTTP ${res.statusCode} for ${ticketId}`));
                    }
                  });
                });
          
                req.on('error', reject);
                req.end();
              });
            }
          
            // Fetch all tickets
            for (const ticketId of ticketIds) {
              try {
                const ticket = await fetchTicket(ticketId);
                tickets.push(ticket);
                console.log(`Fetched: ${ticketId} - ${ticket.summary}`);
              } catch (error) {
                console.log(`Failed to fetch ${ticketId}: ${error.message}`);
                tickets.push({
                  id: ticketId,
                  error: error.message
                });
              }
            }
          
            fs.writeFileSync('.claude-review/jira-tickets.json', JSON.stringify(tickets, null, 2));
          }
          
          // Run the main function
          main().catch(error => {
            console.error('Script failed:', error);
            process.exit(1);
          });
          EOF
          
          # Run the Jira extraction script
          cd .claude-review && node extract-jira.js

      - name: Run Claude Code Review via API
        shell: bash
        env:
          CLAUDE_API_KEY: ${{ secrets.anthropic-api-key }}
        run: |
          # Create the review script
          cat > .claude-review/claude-review.js << 'EOF'
          const fs = require('fs');
          const https = require('https');
          
          const apiKey = process.env.CLAUDE_API_KEY;
          
          // Read all the review data
          const prInfo = JSON.parse(fs.readFileSync('.claude-review/pr-info/pr-info.json', 'utf8'));
          const diff = fs.readFileSync('.claude-review/pr-changes.diff', 'utf8');
          const filesToReview = fs.readFileSync('.claude-review/files-to-review.txt', 'utf8').trim().split('\n').filter(f => f);
          const jiraTickets = JSON.parse(fs.readFileSync('.claude-review/jira-tickets.json', 'utf8'));
          
          // Build the prompt
          let prompt = `# Code Review Task
          
          You are an expert code reviewer examining a pull request. Please perform a thorough code review.
          
          ## PR Information
          - Title: ${prInfo.title}
          - Author: ${prInfo.user.login}
          - Description: ${prInfo.body || 'No description provided'}
          - Target Branch: ${process.env.TARGET_BRANCH}
          - Files to review: ${filesToReview.length}
          
          ## Jira Context
          `;
          
          if (jiraTickets.length > 0) {
            prompt += `Found ${jiraTickets.length} related Jira ticket(s):\n`;
            jiraTickets.forEach(ticket => {
              if (ticket.error) {
                prompt += `- ${ticket.id}: Error fetching details (${ticket.error})\n`;
              } else {
                prompt += `- ${ticket.id}: ${ticket.summary} (Status: ${ticket.status})\n`;
                if (ticket.description) {
                  prompt += `  Description: ${ticket.description.substring(0, 500)}...\n`;
                }
              }
            });
          } else {
            prompt += 'No Jira tickets referenced in this PR.\n';
          }
          
          prompt += `
          ## Code Changes
          Files changed: ${filesToReview.join(', ')}
          
          \`\`\`diff
          ${diff}
          \`\`\`
          
          ## Review Guidelines
          Please analyze the code changes and provide:
          1. **Summary** - Overall assessment and key points
          2. **Recommendations** - Prioritized list of suggested changes
          3. **Detailed Review** - Specific feedback organized by file/component
          4. **Questions** - Any clarifications needed from the author
          
          Focus on:
          - Bugs, logic errors, or potential issues
          - Security vulnerabilities
          - Performance concerns
          - Best practices and coding standards
          - Completeness relative to Jira requirements
          - Test coverage and quality
          
          Keep your review constructive and professional.`;
          
          // Add Milchick voice if requested
          if (process.env.USE_MILCHICK_VOICE === 'true') {
            prompt += '\n\nAdditionally, adopt the persona and voice of Seth Milchick from the TV show Severance for this review. Maintain his characteristic tone and mannerisms throughout your response.';
          }
          
          // Prepare API request
          const requestBody = JSON.stringify({
            model: 'claude-3-5-sonnet-20241022',
            max_tokens: 4000,
            messages: [{
              role: 'user',
              content: prompt
            }]
          });
          
          const options = {
            hostname: 'api.anthropic.com',
            path: '/v1/messages',
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'x-api-key': apiKey,
              'anthropic-version': '2023-06-01',
              'Content-Length': Buffer.byteLength(requestBody)
            }
          };
          
          // Make the API request
          const req = https.request(options, (res) => {
            let data = '';
            res.on('data', chunk => data += chunk);
            res.on('end', () => {
              if (res.statusCode === 200) {
                try {
                  const response = JSON.parse(data);
                  const review = response.content[0].text;
                  fs.writeFileSync('.claude-review/review-output.md', review);
                  console.log('Claude review completed successfully');
                } catch (error) {
                  console.error('Error parsing Claude response:', error);
                  fs.writeFileSync('.claude-review/review-output.md', 'Error: Failed to parse Claude response');
                  process.exit(1);
                }
              } else {
                console.error(`Claude API error: ${res.statusCode}`);
                console.error('Response:', data);
                fs.writeFileSync('.claude-review/review-output.md', `Error: Claude API returned ${res.statusCode}`);
                process.exit(1);
              }
            });
          });
          
          req.on('error', (error) => {
            console.error('Request error:', error);
            fs.writeFileSync('.claude-review/review-output.md', 'Error: Failed to connect to Claude API');
            process.exit(1);
          });
          
          req.write(requestBody);
          req.end();
          EOF
          
          # Set environment variables for the script
          export USE_MILCHICK_VOICE="${{ inputs.use-milchick-voice }}"
          export TARGET_BRANCH="${{ inputs.base-branch }}"
          
          # Run the Claude review
          cd .claude-review && node claude-review.js

      - name: Post review comment
        shell: bash
        run: |
          # Format review comment with prefix
          REVIEW_PREFIX="🔍 **Milcheck Code Review:**"
          REVIEW_CONTENT="$REVIEW_PREFIX

          $(cat .claude-review/review-output.md)
          
          <sub>This review was automatically generated by Claude API. If you have feedback on this review, please let the maintainers know.</sub>"
          
          # Post comment to PR
          RESPONSE=$(curl -s -X POST \
            -H "Authorization: token ${{ secrets.github-token }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -w "%{http_code}" \
            "https://api.github.com/repos/${{ inputs.repository }}/issues/${{ inputs.pr-number }}/comments" \
            -d "{\"body\": $(echo "$REVIEW_CONTENT" | jq -s -R .)}")
          
          HTTP_CODE="$RESPONSE"

          if [ "$HTTP_CODE" -ge 400 ]; then
            echo "Error: Failed to post review comment. HTTP code: $HTTP_CODE"
            echo "Response: $RESPONSE"
            exit 1
          fi

          echo "Review comment posted to PR #${{ inputs.pr-number }}"