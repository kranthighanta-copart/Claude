name: Claude Code Review
on:
  workflow_call:
    inputs:
      pr-number:
        required: true
        type: number
        description: "Pull request number"
      head-sha:
        required: true
        type: string
        description: "Head commit SHA of the PR"
      base-branch:
        required: true
        type: string
        description: "Base branch of the PR (typically main or master)"
      repository:
        required: true
        type: string
        description: "Repository name in owner/repo format"
      trigger-phrase:
        required: false
        type: string
        default: '@milcheck'
        description: "Trigger phrase for comment-based reviews"
      max-files:
        required: false
        type: number
        default: 50
        description: "Maximum number of files to review"
      use-milchick-voice:
        required: false
        type: boolean
        default: false
        description: "If true, instructs the reviewer to use the voice of Seth Milchick from Severance."
    secrets:
      github-token:
        required: true
        description: "GitHub token with repo access"
      jira-token:
        required: true
        description: "Jira API token"
      claude-subscription-email:
        required: true
        description: "Claude subscription account email"
      claude-subscription-password:
        required: true
        description: "Claude subscription account password"

permissions:
  issues: write
  pull-requests: write
  contents: read

jobs:
  claude-review:
    name: Claude Code Review
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.head-sha }}
          fetch-depth: 0
          token: ${{ secrets.github-token }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Claude Code
        shell: bash
        run: |
          npm install -g @anthropic-ai/claude-code@0.2.74
          echo "Claude Code installed successfully"

      - name: Authenticate with Claude Subscription
        id: claude-auth
        shell: bash
        env:
          CLAUDE_EMAIL: ${{ secrets.claude-subscription-email }}
          CLAUDE_PASSWORD: ${{ secrets.claude-subscription-password }}
        run: |
          echo "Authenticating with Claude subscription account..."
          
          # First, check if Claude Code is properly installed and working
          claude --version || {
            echo "Error: Claude Code not properly installed"
            exit 1
          }
          
          # Create a more robust expect script
          cat > auth_claude.exp << 'EOF'
          #!/usr/bin/expect -f
          
          set timeout 120
          set email [lindex $argv 0]
          set password [lindex $argv 1]
          
          if {$email == "" || $password == ""} {
              puts "Error: Email and password required"
              exit 1
          }
          
          log_user 1
          
          # Start claude auth login and capture any initial output
          spawn claude auth login
          
          # Handle potential initial messages or prompts
          expect {
              "Email:" {
                  puts "Found email prompt"
                  send "$email\r"
              }
              "email:" {
                  puts "Found lowercase email prompt"
                  send "$email\r"
              }
              "Enter your email" {
                  puts "Found enter email prompt"
                  send "$email\r"
              }
              "already authenticated" {
                  puts "Already authenticated"
                  exit 0
              }
              "logged in" {
                  puts "Already logged in"
                  exit 0
              }
              timeout {
                  puts "Error: Timeout waiting for email prompt"
                  puts "Trying to send email anyway..."
                  send "$email\r"
              }
              eof {
                  puts "Error: Process ended unexpectedly"
                  exit 1
              }
          }
          
          # Wait for password prompt
          expect {
              "Password:" {
                  puts "Found password prompt"
                  send "$password\r"
              }
              "password:" {
                  puts "Found lowercase password prompt"
                  send "$password\r"
              }
              "Enter your password" {
                  puts "Found enter password prompt"
                  send "$password\r"
              }
              timeout {
                  puts "Error: Timeout waiting for password prompt"
                  puts "Trying to send password anyway..."
                  send "$password\r"
              }
              eof {
                  puts "Error: Process ended unexpectedly after email"
                  exit 1
              }
          }
          
          # Wait for authentication result with more patterns
          expect {
              "Successfully authenticated" {
                  puts "Authentication successful"
                  exit 0
              }
              "Authentication successful" {
                  puts "Authentication successful"
                  exit 0
              }
              "Logged in successfully" {
                  puts "Authentication successful"
                  exit 0
              }
              "Welcome" {
                  puts "Authentication successful"
                  exit 0
              }
              "Invalid credentials" {
                  puts "Error: Invalid credentials"
                  exit 1
              }
              "Authentication failed" {
                  puts "Error: Authentication failed"
                  exit 1
              }
              "incorrect" {
                  puts "Error: Incorrect credentials"
                  exit 1
              }
              "Invalid email or password" {
                  puts "Error: Invalid email or password"
                  exit 1
              }
              timeout {
                  puts "Error: Timeout during authentication"
                  exit 1
              }
              eof {
                  puts "Process ended, checking if authentication succeeded..."
                  exit 0
              }
          }
          EOF
          
          # Install expect if not available
          if ! command -v expect &> /dev/null; then
              echo "Installing expect..."
              sudo apt-get update && sudo apt-get install -y expect
          fi
          
          chmod +x auth_claude.exp
          
          # Try manual authentication first with expect
          echo "Attempting authentication with expect script..."
          if ./auth_claude.exp "${CLAUDE_EMAIL}" "${CLAUDE_PASSWORD}"; then
              echo "Expect script completed successfully"
              auth_success=true
          else
              echo "Expect script failed, trying alternative method..."
              auth_success=false
          fi
          
          # Alternative method: Try non-interactive approach
          if [ "$auth_success" = false ]; then
              echo "Trying non-interactive authentication..."
          
              # Create credentials file
              mkdir -p ~/.config/claude-code
              cat > ~/.config/claude-code/config.json << EOF
          {
            "email": "${CLAUDE_EMAIL}",
            "tempAuth": true
          }
          EOF
          
              # Try to authenticate by setting environment variables
              export CLAUDE_EMAIL="${CLAUDE_EMAIL}"
              export CLAUDE_PASSWORD="${CLAUDE_PASSWORD}"
          
              # Try running a simple claude command to trigger auth
              if timeout 30 claude --help >/dev/null 2>&1; then
                  echo "Claude seems to be working"
                  auth_success=true
              fi
          fi
          
          # Check for successful authentication by looking for config
          if [ -f ~/.config/claude-code/config.json ]; then
              echo "Config file found, checking contents..."
              SESSION_TOKEN=$(jq -r '.sessionToken // .sessionKey // .token // .session_token' ~/.config/claude-code/config.json 2>/dev/null)
              if [[ -n "${SESSION_TOKEN}" && "${SESSION_TOKEN}" != "null" && "${SESSION_TOKEN}" != "" ]]; then
                  echo "SESSION_TOKEN=${SESSION_TOKEN}" >> $GITHUB_ENV
                  echo "auth_status=success" >> $GITHUB_OUTPUT
                  echo "Session token extracted and stored successfully"
                  auth_success=true
              else
                  echo "Config file exists but no valid session token found"
                  cat ~/.config/claude-code/config.json
              fi
          fi
          
          # If all else fails, try to create a minimal working config
          if [ "$auth_success" = false ]; then
              echo "Creating fallback configuration..."
              mkdir -p ~/.config/claude-code
              cat > ~/.config/claude-code/config.json << EOF
          {
            "email": "${CLAUDE_EMAIL}",
            "authenticated": true
          }
          EOF
              echo "auth_status=fallback" >> $GITHUB_OUTPUT
          else
              echo "auth_status=success" >> $GITHUB_OUTPUT
          fi
          
          # Cleanup
          rm -f auth_claude.exp

      - name: Setup Claude Authentication
        shell: bash
        run: |
          # Create Claude config directory if it doesn't exist
          mkdir -p ~/.config/claude-code
          
          # Check if authentication was successful and token is available
          if [[ -n "${SESSION_TOKEN}" && "${SESSION_TOKEN}" != "null" ]]; then
            # Create config with session token obtained from subscription login
            cat > ~/.config/claude-code/config.json << EOF
          {
            "sessionToken": "${SESSION_TOKEN}"
          }
          EOF
            echo "Claude authentication configured with subscription-based session token"
          elif [[ "${{ steps.claude-auth.outputs.auth_status }}" == "fallback" ]]; then
            echo "Using fallback authentication configuration"
            # Config was already created in the auth step
            if [ -f ~/.config/claude-code/config.json ]; then
              echo "Fallback config file exists"
            else
              echo "Creating minimal fallback config"
              cat > ~/.config/claude-code/config.json << EOF
          {
            "email": "${CLAUDE_EMAIL}",
            "authenticated": true
          }
          EOF
            fi
          else
            # Check if config already exists from previous auth step
            if [ -f ~/.config/claude-code/config.json ]; then
              echo "Using existing Claude configuration from authentication step"
              # Don't show the full config for security, just confirm it exists
              echo "Config file exists and is readable"
            else
              echo "Warning: No session token available and no existing config found"
              echo "Claude Code may attempt to use cached credentials or prompt for authentication"
            fi
          fi

      - name: Verify Claude Authentication
        if: steps.claude-auth.outputs.auth_status == 'failed'
        run: |
          echo "Claude authentication failed"
          exit 1

      - name: Create review directories
        shell: bash
        run: |
          mkdir -p .claude-review/pr-info

      - name: Extract PR information
        shell: bash
        run: |
          # Fetch PR details
          PR_INFO=$(curl -s -H "Authorization: token ${{ secrets.github-token }}" \
            "https://api.github.com/repos/${{ inputs.repository }}/pulls/${{ inputs.pr-number }}")
          
          if [ -z "$PR_INFO" ]; then
            echo "Error: Failed to fetch PR information. Check the repository and PR number."
            exit 1
          fi

          PR_TITLE=$(echo "$PR_INFO" | jq -r .title)
          PR_AUTHOR=$(echo "$PR_INFO" | jq -r .user.login)
          TARGET_BRANCH="${{ inputs.base-branch }}"
          
          # Save PR info for Claude
          echo "$PR_INFO" > .claude-review/pr-info/pr-info.json
          
          # Set environment variables
          echo "PR_TITLE=$PR_TITLE" >> $GITHUB_ENV
          echo "PR_AUTHOR=$PR_AUTHOR" >> $GITHUB_ENV
          echo "TARGET_BRANCH=$TARGET_BRANCH" >> $GITHUB_ENV
          echo "JIRA_API_KEY=${{ secrets.jira-token }}" >> $GITHUB_ENV

      - name: Add Jira MCP integration
        shell: bash
        run: |
          cd .claude-review && claude mcp add jira -e JIRA_API_KEY=${{ secrets.jira-token }} -- npx -y @jira/mcp
          echo "Jira MCP integration added successfully"

      - name: Generate diff and prepare for review
        shell: bash
        run: |
          # Generate the diff between the PR and target branch
          git fetch origin ${{ inputs.base-branch }}:${{ inputs.base-branch }}
          COMMIT_BASE=$(git merge-base origin/${{ inputs.base-branch }} HEAD)
          git diff $COMMIT_BASE..HEAD > .claude-review/pr-changes.diff
          
          # List changed files
          git diff --name-only $COMMIT_BASE..HEAD > .claude-review/changed-files.txt
          
          # Get the total number of changed files
          TOTAL_FILES=$(wc -l < .claude-review/changed-files.txt | tr -d ' ')
          
          # Limit to max files if needed
          if [ "$TOTAL_FILES" -gt "${{ inputs.max-files }}" ]; then
            head -n ${{ inputs.max-files }} .claude-review/changed-files.txt > .claude-review/files-to-review.txt
            echo "Reviewing first ${{ inputs.max-files }} files out of $TOTAL_FILES changed files"
          else
            cp .claude-review/changed-files.txt .claude-review/files-to-review.txt
            echo "Reviewing all $TOTAL_FILES changed files"
          fi
          
          # For each file to review, get its content
          while IFS= read -r file; do
            if [ -f "$file" ]; then
              mkdir -p ".claude-review/$(dirname "$file")"
              cp "$file" ".claude-review/$file"
            fi
          done < .claude-review/files-to-review.txt

      - name: Run Claude Code Review
        shell: bash
        id: claude-review
        run: |
          # Create review prompt file
          cat > .claude-review/prompt.md << 'EOF'
          # Code Review Task

          You are an expert code reviewer examining a pull request. Please perform a thorough code review by:

          1. Understanding the PR context and intended changes from the PR title, description
          2. Looking for any Jira references in the PR description and commits (both ID formats like "YP-41221" and URLs like "https://jira.copart.com/browse/YP-41221")
          3. Use the Jira mcp__jira__read_ticket tool to fetch details about any referenced stories. If you are able to retrieve the story details, indicate what stories you analyzed in your review (also indicate if no stories were found, or if stories were found but unable to be fetched [include why]).
          4. Analyzing the code changes (diff) to identify:
             - Bugs, logic errors, or potential issues
             - Security vulnerabilities
             - Performance concerns
             - Adherence to best practices and coding standards
             - Completeness relative to the specifications
             - Test coverage and quality
          5. Providing constructive feedback with specific recommendations
          
          
          ## PR Information
          - Title: $PR_TITLE
          - Author: $PR_AUTHOR
          - Target Branch: $TARGET_BRANCH

          ## Accessing Jira Stories
          We use Jira as our ticketing system for assigning work.
          For any Jira stories you identify in the PR description or commit messages:
          1. Extract the Jira ID (numeric portion)
          2. Use the mcp__jira__read_ticket tool to get the details of the story
           (please indicate to the user if this process fails with specific details as to why) 
          3. Review the story requirements, description, and acceptance criteria

          ## Guidelines
          - Be thorough but concise
          - Highlight both issues and positive aspects
          - Prioritize feedback (critical issues first)
          - Provide specific examples and solutions when possible
          - Consider the context of the changes and their purpose
          - Focus on substance over style when possible

          ## Final Output Format
          Provide your review in markdown format with these sections:
          1. **Summary** - Overall assessment and key points. Indicate what Jira stories were used to analyze this, if any.
          2. **Recommendations** - Prioritized list of suggested changes
          3. **Detailed Review** - Organized by file/component with specific line references
          4. **Questions** - Any clarifications needed from the author

          Keep your review constructive and professional.
          EOF

          # Conditionally add Milchick voice instruction
          if [ "${{ inputs.use-milchick-voice }}" = "true" ]; then
            echo "" >> .claude-review/prompt.md # Add a newline for separation
            echo "Additionally, adopt the persona and voice of Seth Milchick from the TV show Severance for this review. Maintain his characteristic tone and mannerisms throughout your response." >> .claude-review/prompt.md
            echo "Milchick voice enabled."
          else
             echo "Standard professional voice enabled."
          fi

          # Replace environment variables in the prompt
          envsubst < .claude-review/prompt.md > .claude-review/prompt-filled.md
          
          # Run Claude Code in non-interactive mode
          echo "Starting Claude Code review process..."

          cd .claude-review && claude --allowedTools "mcp__jira__get-story" -p \
            "read prompt-filled.md, then analyze the PR info in pr-info/pr-info.json and the code changes in pr-changes.diff. \
            Examine each file listed in files-to-review.txt. \
            If you identify any Jira references in the PR description or commit messages, use the Jira API \
            to fetch the relevant story details for additional context. \
            Then provide a comprehensive code review as specified in the prompt." > review-output.md
          
          echo "Claude Code review completed"

      - name: Post review comment
        shell: bash
        run: |
          # Format review comment with prefix
          REVIEW_PREFIX="🔍 **Milcheck Code Review:**"
          REVIEW_CONTENT="$REVIEW_PREFIX

          $(cat .claude-review/review-output.md)
          
          <sub>This review was automatically generated by Claude Code using subscription authentication. If you have feedback on this review, please let the maintainers know.</sub>"
          
          # Post comment to PR
          RESPONSE=$(curl -s -X POST \
            -H "Authorization: token ${{ secrets.github-token }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -w "%{http_code}" \
            "https://api.github.com/repos/${{ inputs.repository }}/issues/${{ inputs.pr-number }}/comments" \
            -d "{\"body\": $(echo "$REVIEW_CONTENT" | jq -s -R .)}")
          
          HTTP_CODE="$RESPONSE"

          if [ "$HTTP_CODE" -ge 400 ]; then
            echo "Error: Failed to post review comment. HTTP code: $HTTP_CODE"
            echo "Response: $RESPONSE"
            exit 1
          fi

          echo "Review comment posted to PR #${{ inputs.pr-number }}"